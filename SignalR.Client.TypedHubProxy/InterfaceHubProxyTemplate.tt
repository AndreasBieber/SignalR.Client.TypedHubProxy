<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Threading.Tasks" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections.Generic" #>


using Microsoft.AspNet.SignalR.Client;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;

namespace <#=Interface.Namespace#>
{
    public class <#=Interface.Name#>Proxy : <#=Interface.FullName.Replace("+", ".")#>
    {
        private readonly IHubProxy _hubProxy;

        public <#=Interface.Name#>Proxy(IHubProxy hubProxy)
        {
            _hubProxy = hubProxy;
        }
<#
foreach(MethodInfo methodInfo in Interface.GetMethods()) 
{
    string taskSubtype = string.Empty;
    string parametersSignature = string.Join(", ", methodInfo.GetParameters().Select(p => string.Format("{0} {1}", p.ParameterType.FullName.Replace("+", "."), p.Name)));

    if (methodInfo.ReturnType != typeof(Task)) 
    {
        taskSubtype = string.Format("<{0}>", methodInfo.ReturnType.GenericTypeArguments[0].FullName.Replace("+", "."));
    }

#>        
        public Task<#=taskSubtype#> <#=methodInfo.Name#>(<#=parametersSignature#>)
        {
            return _hubProxy.Invoke<#=taskSubtype#>(GetMethodName()<#=methodInfo.GetParameters().Any() ? ", " + string.Join(", ", methodInfo.GetParameters().Select(p => p.Name)) : string.Empty#>);
        }
<#
}
#>

        private string GetMethodName([CallerMemberName] string methodName = null)
        {
            return methodName;
        }
    }
}